//********example********////被引用的结构需要写在引用他的结构前面,两个结构体不可以相互引用//被temp_demo_a引用的变量struct temp_demo_b{	int16 f;//	string c="test";//}//结构体支持的定义格式struct temp_demo_a{	temp_demo_b a;//自定义单变量的定义	list<temp_demo_b> b;//自定义结构列表的定义	string c="test";//字符串定义	list<string> d;//字符串列表定义	short e;//lua协议需要大于=0的数	int16 f;//lua协议需要大于=0的数	int32 g;//lua协议需要大于=0的数	bool h;//lua协议需要大于=0的数	int64 i;//lua协议需要大于=0的数	list<int64> l;//通用列表的定义}//协议号规则 "enum "开头，所有的enum会被//整合到一起, "enum"后面的名字可以重复 enum arg{	agreement_test=0;//测试协议号}//**********end**********////错误码描述enum err_enum{	err_frequent_request=5000;//频繁请求}enum arg{	ping=1;//客户端向服务器ping请求 (保持活力)	err=2;//错误码	agreement_login=3;//账号登录请求	agreement_login_c=4;//账号登录请求反馈}//*************************************////错误码struct err_data{	int32 err_code=5000;}//*************************************////客户端向服务端定时pingstruct ping{	short msg=0;}//客户端向服务端账号登录请求struct account_login{	string username="username";	string password="password";}//账号登录请求反馈struct account_login_c{	int16 res=0;//1:登录成功 0：登录失败}//测试2struct test02{	String str="123";//变量说明1	list<string> strs;	int32 i32=1;	list<int32> i32_s;	short s=1;	list<short> s_s;	bool bl=false;//顶顶顶顶1111	list<bool> bl_s;}//测试1struct test01{	String str="123";//变量说明1	list<string> strs;	int32 i32=1;	list<int32> i32_s;	short s=1;	list<short> s_s;	bool bl=false;//变量说明1111	list<bool> bl_s;	test02 t2;	list<test02> t2_s;	int64 i64=1;	list<int64> i64_s;}struct test00002{	list<String> str_list;	String str;}struct test0000{	list<test00002> t2_list;	list<String> str_list;	String str;	test00002 t2;}