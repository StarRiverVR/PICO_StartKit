//********example********////被引用的结构需要写在引用他的结构前面,两个结构体不可以相互引用//被temp_demo_a引用的变量struct temp_demo_b{	int16 f;//	string c="test";//}//结构体支持的定义格式struct temp_demo_a{	temp_demo_b a;//自定义单变量的定义	list<temp_demo_b> b;//自定义结构列表的定义	string c="test";//字符串定义	list<string> d;//字符串列表定义	short e;//lua协议需要大于=0的数	int16 f;//lua协议需要大于=0的数	int32 g;//lua协议需要大于=0的数	bool h;//lua协议需要大于=0的数	int64 i;//lua协议需要大于=0的数	list<int64> l;//通用列表的定义}//心跳包struct heart_data{	int16 res=0;}//协议号规则 "enum "开头，所有的enum会被//整合到一起, "enum"后面的名字可以重复 enum arg{	Heart_S=1;//心跳 服务器	Heart_C=2;//心跳 客户端}//**********end**********////Log日志enum err_enum{	Debug_Log=3;//log日志	Debug_LogError=4;//log日志	Debug_LogWarning=5;//log日志}struct log_data{	string logStr="";	int32 processId=0;}